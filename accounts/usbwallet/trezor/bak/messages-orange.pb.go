// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages-orange.proto

package bak

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
// Request: Ask device for public key corresponding to address_n path
// @start
// @next OrangePublicKey
// @next Failure
type OrangeGetPublicKey struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	ShowDisplay          *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrangeGetPublicKey) Reset()         { *m = OrangeGetPublicKey{} }
func (m *OrangeGetPublicKey) String() string { return proto.CompactTextString(m) }
func (*OrangeGetPublicKey) ProtoMessage()    {}
func (*OrangeGetPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{0}
}

func (m *OrangeGetPublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrangeGetPublicKey.Unmarshal(m, b)
}
func (m *OrangeGetPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrangeGetPublicKey.Marshal(b, m, deterministic)
}
func (m *OrangeGetPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrangeGetPublicKey.Merge(m, src)
}
func (m *OrangeGetPublicKey) XXX_Size() int {
	return xxx_messageInfo_OrangeGetPublicKey.Size(m)
}
func (m *OrangeGetPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_OrangeGetPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_OrangeGetPublicKey proto.InternalMessageInfo

func (m *OrangeGetPublicKey) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *OrangeGetPublicKey) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

//*
// Response: Contains public key derived from device private seed
// @end
type OrangePublicKey struct {
	Node                 *HDNodeType `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Xpub                 *string     `protobuf:"bytes,2,opt,name=xpub" json:"xpub,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrangePublicKey) Reset()         { *m = OrangePublicKey{} }
func (m *OrangePublicKey) String() string { return proto.CompactTextString(m) }
func (*OrangePublicKey) ProtoMessage()    {}
func (*OrangePublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{1}
}

func (m *OrangePublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrangePublicKey.Unmarshal(m, b)
}
func (m *OrangePublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrangePublicKey.Marshal(b, m, deterministic)
}
func (m *OrangePublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrangePublicKey.Merge(m, src)
}
func (m *OrangePublicKey) XXX_Size() int {
	return xxx_messageInfo_OrangePublicKey.Size(m)
}
func (m *OrangePublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_OrangePublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_OrangePublicKey proto.InternalMessageInfo

func (m *OrangePublicKey) GetNode() *HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *OrangePublicKey) GetXpub() string {
	if m != nil && m.Xpub != nil {
		return *m.Xpub
	}
	return ""
}

//*
// Request: Ask device for Orange address corresponding to address_n path
// @start
// @next OrangeAddress
// @next Failure
type OrangeGetAddress struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	ShowDisplay          *bool    `protobuf:"varint,2,opt,name=show_display,json=showDisplay" json:"show_display,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrangeGetAddress) Reset()         { *m = OrangeGetAddress{} }
func (m *OrangeGetAddress) String() string { return proto.CompactTextString(m) }
func (*OrangeGetAddress) ProtoMessage()    {}
func (*OrangeGetAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{2}
}

func (m *OrangeGetAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrangeGetAddress.Unmarshal(m, b)
}
func (m *OrangeGetAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrangeGetAddress.Marshal(b, m, deterministic)
}
func (m *OrangeGetAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrangeGetAddress.Merge(m, src)
}
func (m *OrangeGetAddress) XXX_Size() int {
	return xxx_messageInfo_OrangeGetAddress.Size(m)
}
func (m *OrangeGetAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_OrangeGetAddress.DiscardUnknown(m)
}

var xxx_messageInfo_OrangeGetAddress proto.InternalMessageInfo

func (m *OrangeGetAddress) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *OrangeGetAddress) GetShowDisplay() bool {
	if m != nil && m.ShowDisplay != nil {
		return *m.ShowDisplay
	}
	return false
}

//*
// Response: Contains an Orange address derived from device private seed
// @end
type OrangeAddress struct {
	AddressBin           []byte   `protobuf:"bytes,1,opt,name=addressBin" json:"addressBin,omitempty"`
	AddressHex           *string  `protobuf:"bytes,2,opt,name=addressHex" json:"addressHex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrangeAddress) Reset()         { *m = OrangeAddress{} }
func (m *OrangeAddress) String() string { return proto.CompactTextString(m) }
func (*OrangeAddress) ProtoMessage()    {}
func (*OrangeAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{3}
}

func (m *OrangeAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrangeAddress.Unmarshal(m, b)
}
func (m *OrangeAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrangeAddress.Marshal(b, m, deterministic)
}
func (m *OrangeAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrangeAddress.Merge(m, src)
}
func (m *OrangeAddress) XXX_Size() int {
	return xxx_messageInfo_OrangeAddress.Size(m)
}
func (m *OrangeAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_OrangeAddress.DiscardUnknown(m)
}

var xxx_messageInfo_OrangeAddress proto.InternalMessageInfo

func (m *OrangeAddress) GetAddressBin() []byte {
	if m != nil {
		return m.AddressBin
	}
	return nil
}

func (m *OrangeAddress) GetAddressHex() string {
	if m != nil && m.AddressHex != nil {
		return *m.AddressHex
	}
	return ""
}

//*
// Request: Ask device to sign transaction
// All fields are optional from the protocol's point of view. Each field defaults to value `0` if missing.
// Note: the first at most 1024 bytes of data MUST be transmitted as part of this message.
// @start
// @next OrangeTxRequest
// @next Failure
type OrangeSignTx struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Nonce                []byte   `protobuf:"bytes,2,opt,name=nonce" json:"nonce,omitempty"`
	GasPrice             []byte   `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice" json:"gas_price,omitempty"`
	GasLimit             []byte   `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`
	ToBin                []byte   `protobuf:"bytes,5,opt,name=toBin" json:"toBin,omitempty"`
	ToHex                *string  `protobuf:"bytes,11,opt,name=toHex" json:"toHex,omitempty"`
	Value                []byte   `protobuf:"bytes,6,opt,name=value" json:"value,omitempty"`
	DataInitialChunk     []byte   `protobuf:"bytes,7,opt,name=data_initial_chunk,json=dataInitialChunk" json:"data_initial_chunk,omitempty"`
	DataLength           *uint32  `protobuf:"varint,8,opt,name=data_length,json=dataLength" json:"data_length,omitempty"`
	ChainId              *uint32  `protobuf:"varint,9,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	TxType               *uint32  `protobuf:"varint,10,opt,name=tx_type,json=txType" json:"tx_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrangeSignTx) Reset()         { *m = OrangeSignTx{} }
func (m *OrangeSignTx) String() string { return proto.CompactTextString(m) }
func (*OrangeSignTx) ProtoMessage()    {}
func (*OrangeSignTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{4}
}

func (m *OrangeSignTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrangeSignTx.Unmarshal(m, b)
}
func (m *OrangeSignTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrangeSignTx.Marshal(b, m, deterministic)
}
func (m *OrangeSignTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrangeSignTx.Merge(m, src)
}
func (m *OrangeSignTx) XXX_Size() int {
	return xxx_messageInfo_OrangeSignTx.Size(m)
}
func (m *OrangeSignTx) XXX_DiscardUnknown() {
	xxx_messageInfo_OrangeSignTx.DiscardUnknown(m)
}

var xxx_messageInfo_OrangeSignTx proto.InternalMessageInfo

func (m *OrangeSignTx) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *OrangeSignTx) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *OrangeSignTx) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *OrangeSignTx) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *OrangeSignTx) GetToBin() []byte {
	if m != nil {
		return m.ToBin
	}
	return nil
}

func (m *OrangeSignTx) GetToHex() string {
	if m != nil && m.ToHex != nil {
		return *m.ToHex
	}
	return ""
}

func (m *OrangeSignTx) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *OrangeSignTx) GetDataInitialChunk() []byte {
	if m != nil {
		return m.DataInitialChunk
	}
	return nil
}

func (m *OrangeSignTx) GetDataLength() uint32 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *OrangeSignTx) GetChainId() uint32 {
	if m != nil && m.ChainId != nil {
		return *m.ChainId
	}
	return 0
}

func (m *OrangeSignTx) GetTxType() uint32 {
	if m != nil && m.TxType != nil {
		return *m.TxType
	}
	return 0
}

//*
// Response: Device asks for more data from transaction payload, or returns the signature.
// If data_length is set, device awaits that many more bytes of payload.
// Otherwise, the signature_* fields contain the computed transaction signature. All three fields will be present.
// @end
// @next OrangeTxAck
type OrangeTxRequest struct {
	DataLength           *uint32  `protobuf:"varint,1,opt,name=data_length,json=dataLength" json:"data_length,omitempty"`
	SignatureV           *uint32  `protobuf:"varint,2,opt,name=signature_v,json=signatureV" json:"signature_v,omitempty"`
	SignatureR           []byte   `protobuf:"bytes,3,opt,name=signature_r,json=signatureR" json:"signature_r,omitempty"`
	SignatureS           []byte   `protobuf:"bytes,4,opt,name=signature_s,json=signatureS" json:"signature_s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrangeTxRequest) Reset()         { *m = OrangeTxRequest{} }
func (m *OrangeTxRequest) String() string { return proto.CompactTextString(m) }
func (*OrangeTxRequest) ProtoMessage()    {}
func (*OrangeTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{5}
}

func (m *OrangeTxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrangeTxRequest.Unmarshal(m, b)
}
func (m *OrangeTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrangeTxRequest.Marshal(b, m, deterministic)
}
func (m *OrangeTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrangeTxRequest.Merge(m, src)
}
func (m *OrangeTxRequest) XXX_Size() int {
	return xxx_messageInfo_OrangeTxRequest.Size(m)
}
func (m *OrangeTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrangeTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrangeTxRequest proto.InternalMessageInfo

func (m *OrangeTxRequest) GetDataLength() uint32 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *OrangeTxRequest) GetSignatureV() uint32 {
	if m != nil && m.SignatureV != nil {
		return *m.SignatureV
	}
	return 0
}

func (m *OrangeTxRequest) GetSignatureR() []byte {
	if m != nil {
		return m.SignatureR
	}
	return nil
}

func (m *OrangeTxRequest) GetSignatureS() []byte {
	if m != nil {
		return m.SignatureS
	}
	return nil
}

//*
// Request: Transaction payload data.
// @next OrangeTxRequest
type OrangeTxAck struct {
	DataChunk            []byte   `protobuf:"bytes,1,opt,name=data_chunk,json=dataChunk" json:"data_chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrangeTxAck) Reset()         { *m = OrangeTxAck{} }
func (m *OrangeTxAck) String() string { return proto.CompactTextString(m) }
func (*OrangeTxAck) ProtoMessage()    {}
func (*OrangeTxAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{6}
}

func (m *OrangeTxAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrangeTxAck.Unmarshal(m, b)
}
func (m *OrangeTxAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrangeTxAck.Marshal(b, m, deterministic)
}
func (m *OrangeTxAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrangeTxAck.Merge(m, src)
}
func (m *OrangeTxAck) XXX_Size() int {
	return xxx_messageInfo_OrangeTxAck.Size(m)
}
func (m *OrangeTxAck) XXX_DiscardUnknown() {
	xxx_messageInfo_OrangeTxAck.DiscardUnknown(m)
}

var xxx_messageInfo_OrangeTxAck proto.InternalMessageInfo

func (m *OrangeTxAck) GetDataChunk() []byte {
	if m != nil {
		return m.DataChunk
	}
	return nil
}

//*
// Request: Ask device to sign message
// @start
// @next OrangeMessageSignature
// @next Failure
type OrangeSignMessage struct {
	AddressN             []uint32 `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`
	Message              []byte   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrangeSignMessage) Reset()         { *m = OrangeSignMessage{} }
func (m *OrangeSignMessage) String() string { return proto.CompactTextString(m) }
func (*OrangeSignMessage) ProtoMessage()    {}
func (*OrangeSignMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{7}
}

func (m *OrangeSignMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrangeSignMessage.Unmarshal(m, b)
}
func (m *OrangeSignMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrangeSignMessage.Marshal(b, m, deterministic)
}
func (m *OrangeSignMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrangeSignMessage.Merge(m, src)
}
func (m *OrangeSignMessage) XXX_Size() int {
	return xxx_messageInfo_OrangeSignMessage.Size(m)
}
func (m *OrangeSignMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_OrangeSignMessage.DiscardUnknown(m)
}

var xxx_messageInfo_OrangeSignMessage proto.InternalMessageInfo

func (m *OrangeSignMessage) GetAddressN() []uint32 {
	if m != nil {
		return m.AddressN
	}
	return nil
}

func (m *OrangeSignMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

//*
// Response: Signed message
// @end
type OrangeMessageSignature struct {
	AddressBin           []byte   `protobuf:"bytes,1,opt,name=addressBin" json:"addressBin,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	AddressHex           *string  `protobuf:"bytes,3,opt,name=addressHex" json:"addressHex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrangeMessageSignature) Reset()         { *m = OrangeMessageSignature{} }
func (m *OrangeMessageSignature) String() string { return proto.CompactTextString(m) }
func (*OrangeMessageSignature) ProtoMessage()    {}
func (*OrangeMessageSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{8}
}

func (m *OrangeMessageSignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrangeMessageSignature.Unmarshal(m, b)
}
func (m *OrangeMessageSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrangeMessageSignature.Marshal(b, m, deterministic)
}
func (m *OrangeMessageSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrangeMessageSignature.Merge(m, src)
}
func (m *OrangeMessageSignature) XXX_Size() int {
	return xxx_messageInfo_OrangeMessageSignature.Size(m)
}
func (m *OrangeMessageSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_OrangeMessageSignature.DiscardUnknown(m)
}

var xxx_messageInfo_OrangeMessageSignature proto.InternalMessageInfo

func (m *OrangeMessageSignature) GetAddressBin() []byte {
	if m != nil {
		return m.AddressBin
	}
	return nil
}

func (m *OrangeMessageSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *OrangeMessageSignature) GetAddressHex() string {
	if m != nil && m.AddressHex != nil {
		return *m.AddressHex
	}
	return ""
}

//*
// Request: Ask device to verify message
// @start
// @next Success
// @next Failure
type OrangeVerifyMessage struct {
	AddressBin           []byte   `protobuf:"bytes,1,opt,name=addressBin" json:"addressBin,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	Message              []byte   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	AddressHex           *string  `protobuf:"bytes,4,opt,name=addressHex" json:"addressHex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrangeVerifyMessage) Reset()         { *m = OrangeVerifyMessage{} }
func (m *OrangeVerifyMessage) String() string { return proto.CompactTextString(m) }
func (*OrangeVerifyMessage) ProtoMessage()    {}
func (*OrangeVerifyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb33f46ba915f15c, []int{9}
}

func (m *OrangeVerifyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrangeVerifyMessage.Unmarshal(m, b)
}
func (m *OrangeVerifyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrangeVerifyMessage.Marshal(b, m, deterministic)
}
func (m *OrangeVerifyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrangeVerifyMessage.Merge(m, src)
}
func (m *OrangeVerifyMessage) XXX_Size() int {
	return xxx_messageInfo_OrangeVerifyMessage.Size(m)
}
func (m *OrangeVerifyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_OrangeVerifyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_OrangeVerifyMessage proto.InternalMessageInfo

func (m *OrangeVerifyMessage) GetAddressBin() []byte {
	if m != nil {
		return m.AddressBin
	}
	return nil
}

func (m *OrangeVerifyMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *OrangeVerifyMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *OrangeVerifyMessage) GetAddressHex() string {
	if m != nil && m.AddressHex != nil {
		return *m.AddressHex
	}
	return ""
}

func init() {
	proto.RegisterType((*OrangeGetPublicKey)(nil), "hw.trezor.messages.orange.OrangeGetPublicKey")
	proto.RegisterType((*OrangePublicKey)(nil), "hw.trezor.messages.orange.OrangePublicKey")
	proto.RegisterType((*OrangeGetAddress)(nil), "hw.trezor.messages.orange.OrangeGetAddress")
	proto.RegisterType((*OrangeAddress)(nil), "hw.trezor.messages.orange.OrangeAddress")
	proto.RegisterType((*OrangeSignTx)(nil), "hw.trezor.messages.orange.OrangeSignTx")
	proto.RegisterType((*OrangeTxRequest)(nil), "hw.trezor.messages.orange.OrangeTxRequest")
	proto.RegisterType((*OrangeTxAck)(nil), "hw.trezor.messages.orange.OrangeTxAck")
	proto.RegisterType((*OrangeSignMessage)(nil), "hw.trezor.messages.orange.OrangeSignMessage")
	proto.RegisterType((*OrangeMessageSignature)(nil), "hw.trezor.messages.orange.OrangeMessageSignature")
	proto.RegisterType((*OrangeVerifyMessage)(nil), "hw.trezor.messages.orange.OrangeVerifyMessage")
}

func init() { proto.RegisterFile("messages-orange.proto", fileDescriptor_cb33f46ba915f15c) }

var fileDescriptor_cb33f46ba915f15c = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x6f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x1a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x12, 0x4f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22,
	0x60, 0x0a, 0x0f, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x68, 0x77, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x44, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x78, 0x70, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x78, 0x70, 0x75,
	0x62, 0x22, 0x52, 0x0a, 0x10, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0x4f, 0x0a, 0x0d, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x48, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x65, 0x78, 0x22, 0xc0, 0x02, 0x0a, 0x0c, 0x4f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67,
	0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x42, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x48, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x48, 0x65, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x4f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x22, 0x2c, 0x0a, 0x0b, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x78, 0x41, 0x63, 0x6b,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22,
	0x4a, 0x0a, 0x11, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x16, 0x4f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x65, 0x78, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x65, 0x78, 0x42, 0x3e, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x61, 0x74, 0x6f, 0x73,
	0x68, 0x69, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x74, 0x72, 0x65, 0x7a, 0x6f, 0x72, 0x2e, 0x6c, 0x69,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x13, 0x54, 0x72, 0x65, 0x7a,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5a,
	0x02, 0x2e, 0x2f,
}
